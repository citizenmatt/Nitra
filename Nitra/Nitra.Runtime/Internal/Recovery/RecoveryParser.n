using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;
using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public class RecoveryParser
  {
    [Record, StructuralEquality]
    public variant ParseRecord
    {
#if DEBUG
      [RecordIgnore]
      public mutable ParseResult : ParseResult;
#endif
      public SequenceStartPos : int;
      public Sequence         : SequenceInfo;
      public Index            : int;
      [RecordIgnore]
      public IsParsed         : bool { get; set; }
      [RecordIgnore]
      public IsSpeculative    : bool { get; set; }
      

      | Simple
      | Extension                  { ExtensibleStartPos : int; RuleParser : ExtensibleRuleParser }
      | Option                     { NextRecord : ParseRecord; }
      | List                       { Counter : int; Subrule : SubruleInfo.List;              NextRecord : ParseRecord; }
      | ListWithSeparatorRule      { Counter : int; Subrule : SubruleInfo.ListWithSeparator; NextRecord : ParseRecord; }
      | ListWithSeparatorSeparator { Counter : int; Subrule : SubruleInfo.ListWithSeparator; NextRecord : ParseRecord; }

      public IsComplete : bool        { get { Index >= Sequence.Subrules.Length } }
      public CurSubrule : SubruleInfo { get { if (Index >= Sequence.Subrules.Length) null else Sequence.Subrules[Index] } }

      public SpeculativeNext() : ParseRecord
      {
        assert3(!IsComplete);
        def result =
          match (this)
          {
            | Simple                          => ParseRecord.Simple                    (SequenceStartPos, Sequence, Index + 1)
            | Extension                  as r => ParseRecord.Extension                 (SequenceStartPos, Sequence, Index + 1, r.ExtensibleStartPos, r.RuleParser)
            | Option                     as r => ParseRecord.Option                    (SequenceStartPos, Sequence, Index + 1, r.NextRecord)
            | List                       as r => ParseRecord.List                      (SequenceStartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
            | ListWithSeparatorRule      as r => ParseRecord.ListWithSeparatorRule     (SequenceStartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
            | ListWithSeparatorSeparator as r => ParseRecord.ListWithSeparatorSeparator(SequenceStartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
          };
          
        result.IsSpeculative = true;
#if DEBUG
        result.ParseResult = this.ParseResult;
#endif
        result
      }

      internal Next() : ParseRecord
      {
        assert3(!IsComplete);
        def result =
          match (this)
          {
            | Simple                          => ParseRecord.Simple                    (SequenceStartPos, Sequence, Index + 1)
            | Extension                  as r => ParseRecord.Extension                 (SequenceStartPos, Sequence, Index + 1, r.ExtensibleStartPos, r.RuleParser)
            | Option                     as r => ParseRecord.Option                    (SequenceStartPos, Sequence, Index + 1, r.NextRecord)
            | List                       as r => ParseRecord.List                      (SequenceStartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
            | ListWithSeparatorRule      as r => ParseRecord.ListWithSeparatorRule     (SequenceStartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
            | ListWithSeparatorSeparator as r => ParseRecord.ListWithSeparatorSeparator(SequenceStartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
          };
          
#if DEBUG
        result.ParseResult = this.ParseResult;
#endif
        result
      }

      public override ToString() : string
      {
        def sb = Text.StringBuilder();
        
        _ = sb.Append("(");
        
        def name = 
          match (this)
          {
            | Simple                     => "Simple    "
            | Extension                  => "Extension "
            | Option                     => "Option    "
            | List                       => "List      "
            | ListWithSeparatorRule      => "ListRule  "
            | ListWithSeparatorSeparator => "ListSep   "
          };

        _ = sb.Append(name);
        
        when (Sequence is SequenceInfo.Ast)
        {
          _ = sb.Append(Sequence.Parser.RuleName);
          _ = sb.Append(" = ");
        }
          
        foreach (r in Sequence.Subrules with i)
        {
          when (i > 0)
            _ = sb.Append("  ");
          when (Index == i)
            _ = sb.Append("●  ");
            
          _ = sb.Append(r);
        }
        
        when (Index == Sequence.Subrules.Length)
            _ = sb.Append(" ♦");
        
        when (this is Extension as ex)
        {
          _ = sb.Append(", ExtensibleStartPos=");
          _ = sb.Append(ex.ExtensibleStartPos);
        }

        _ = sb.Append(", StartPos=");
        
        _ = sb.Append(SequenceStartPos);
        _ = sb.Append(")");

        when (IsSpeculative)
          _ = sb.Append(" !!! ");
        
#if DEBUG
        when (this.ParseResult != null)
        {
          def text = this.ParseResult.Text;
          
          when (SequenceStartPos <= text.Length)
          {
            _ = sb.Append("   «");
            def showLen = 30;
            
            when (SequenceStartPos - showLen > 0)
              _ = sb.Append("…");

            _ = sb.Append(text.SafeLeftSubstring(SequenceStartPos, showLen));
            
            _ = sb.Append("■");
            
            when (SequenceStartPos + showLen <= text.Length)
              _ = sb.Append("…");
              
            _ = sb.Append(text.SafeRightSubstring(SequenceStartPos, showLen));
              
            _ = sb.Append("»");
          }
        }
#endif
        
        sb.ToString()
        //def name = 
        //  match (this)
        //  {
        //    | Simple                     => "Simple       "
        //    | Extension                  => "Extension    "
        //    | Option                     => "Option       "
        //    | List                       => "List         "
        //    | ListWithSeparatorRule      => "ListRule     "
        //    | ListWithSeparatorSeparator => "ListSeparator"
        //  };
        //def subrule = if (IsComplete) "#COMPLETE#" else CurSubrule.ToString();
        //$"$name $SequenceStartPos $subrule"
      }
    }

    public Records     : array[SCG.HashSet[ParseRecord]];
    public ParseResult : ParseResult;
    public Stack       : SCG.Stack[ParseRecord];

    [Record, StructuralEquality]
    public struct SequenceStart
    {
      public Pos      : int;
      public Sequence : SequenceInfo;
      public override ToString() : string
      {
        if (Sequence is SequenceInfo.Ast)
          $"$Pos $(Sequence.Parser.RuleName) = $(Sequence.Description)"
        else
          $"$Pos $(Sequence.Description)"
      }
    }

    [Record, StructuralEquality]
    public struct ExtensibleStart
    {
      public Pos        : int;
      public ParserData :    ExtensibleRuleParserData;

      public override ToString() : string
      {
        $"P$Pos $ParserData"
      }
    }

    [Record, StructuralEquality]
    public struct ParseRecordStart
    {
      public PrevPos : int;
      public Pos     : int;
      public Record  : ParseRecord;

      public override ToString() : string
      {
        $"P$Pos $Record"
      }
    }

    public class ParsedSequence
    {
      public Start   : SequenceStart;
      public Records : SCG.HashSet[ParseRecordStart];
      public Callers : SCG.List[object];

      public AddCaller[T](caller : option[T]) : void
      {
        when (caller is Some(caller))
          Callers.Add(caller)
      }

      public this(start : SequenceStart)
      {
        Start = start;
        Records = SCG.HashSet();
        Callers = SCG.List();
      }
      
      public override ToString() : string
      {
        Start.ToString()
      }
    }

    public class ParsedExtensions
    {
      public Start     : ExtensibleStart;
      public Sequences : SCG.List[ParsedSequence];

      public this(start : ExtensibleStart)
      {
        Start = start;
        Sequences = SCG.List();
      }

      public override ToString() : string
      {
        "ParsedExtensions of " + Start
      }
    }

    public Ast           : Hashtable[SequenceStart,  ParsedSequence] = Hashtable();
    public ExtensionsAst : Hashtable[ExtensibleStart, ParsedExtensions] = Hashtable();

    public this(parseResult : ParseResult)
    {
      Records     = array(parseResult.Text.Length + 1);
      ParseResult = parseResult;
      Stack       = SCG.Stack(50);
    }

    public AddRecord(curPos : int, nextPos : int, record : ParseRecord) : void
    {
#if DEBUG
        record.ParseResult = this.ParseResult;
#endif
      AddRecord(curPos, curPos, nextPos, record)
    }

    public AddRecord(prevPos : int, curPos : int, nextPos : int, record : ParseRecord) : void
    {
      mutable set = Records[nextPos];
      when (set == null)
      {
        set = SCG.HashSet();
        Records[nextPos] = set;
      }
      def newRecord = set.Add(record);
      when (newRecord)
      {
        def sequenceStart = SequenceStart(record.SequenceStartPos, record.Sequence);
        mutable parsedSequence;
        unless (Ast.TryGetValue(sequenceStart, out parsedSequence))
        {
          parsedSequence = ParsedSequence(sequenceStart);
          Ast[sequenceStart] = parsedSequence;

          when (record is ParseRecord.Extension(extensibleStartPos, ruleParser))
          {
            def extensibleStart = ExtensibleStart(extensibleStartPos, ruleParser.ParserData);
            mutable extSet;
            unless (ExtensionsAst.TryGetValue(extensibleStart, out extSet))
            {
              extSet = ParsedExtensions(extensibleStart);
              ExtensionsAst[extensibleStart] = extSet;
            }
            _ = extSet.Sequences.Add(parsedSequence);
          }
        }
        assert2(prevPos <= nextPos);
        _ = parsedSequence.Records.Add(ParseRecordStart(prevPos, nextPos, record));
      }
      when (newRecord && curPos == nextPos)
        Stack.Push(record);
    }

    public StartParse(ruleParser : RuleParser) : void
    {
      def textPos = 0;
      match (ruleParser)
      {
        | SimpleRuleParser     as ruleParser =>
          def sequence = ruleParser.Reflection(ruleParser .RuleId);
          AddRecord(textPos, textPos, ParseRecord.Simple(textPos, sequence, 0));

        | ExtensibleRuleParser as ruleParser =>
          foreach (prefixRule in ruleParser.PrefixRules)
          {
            def sequence = prefixRule.Reflection(prefixRule.RuleId);
            AddRecord(textPos, textPos, ParseRecord.Extension(textPos, sequence, 0, textPos, ruleParser));
          }

        | _ => assert3(false)
      }
      Stack.Clear();
      Parse();
    }

    public Parse(startPos : int = 0) : void
    {
      for (mutable textPos = startPos; textPos < Records.Length; ++textPos)
      {
        def set = Records[textPos];
        when (set == null)
          continue;
        foreach (record when !record.IsParsed in set)
          Stack.Push(record);
        while (Stack.Count > 0)
        {
          def record = Stack.Pop();
          if (record.IsComplete)
            Completion(textPos, record)
          else
            PredictionOrScanning(textPos, record, startPos)
        }
      }
    }

    public CompletionSimple(prevPos : int, textPos : int, record : ParseRecord.Simple, recordsToComplete : SCG.IEnumerable[ParseRecord]) : void
    {
      foreach (x when !x.IsComplete in recordsToComplete)
        when (x.CurSubrule is SimpleCall as rule when rule.RuleParser : object == record.Sequence.Parser)
          AddRecord(prevPos, textPos, textPos, x.Next());
    }

    public CompletionExtension(prevPos : int, textPos : int, record : ParseRecord.Extension, recordsToComplete : SCG.IEnumerable[ParseRecord]) : void
    {
      def extensibleParser = record.RuleParser;
      foreach (x when !x.IsComplete in recordsToComplete)
        when (x.CurSubrule is ExtensibleCall as rule when rule.RuleParser : object == extensibleParser)
          AddRecord(prevPos, textPos, textPos, x.Next());
    }

    public Completion(textPos : int, record : ParseRecord) : void
    {
      match (record)
      {
        | Simple as record =>
          if (record.SequenceStartPos == textPos)
          {
            def records = SCG.List();
            do
            {
              records.Clear();
              records.AddRange(Records[record.SequenceStartPos]);
              CompletionSimple(record.SequenceStartPos, textPos, record, records);
            }
            while(records.Count != Records[record.SequenceStartPos].Count);
          }
          else
          {
            CompletionSimple(record.SequenceStartPos, textPos, record, Records[record.SequenceStartPos]);
          }

        | Extension as record =>
          if (record.ExtensibleStartPos == textPos)
          {
            def records = SCG.List();
            do
            {
              records.Clear();
              records.AddRange(Records[record.ExtensibleStartPos]);
              CompletionExtension(record.ExtensibleStartPos, textPos, record, records);
            }
            while(records.Count != Records[record.ExtensibleStartPos].Count);
          }
          else
          {
            CompletionExtension(record.ExtensibleStartPos, textPos, record, Records[record.ExtensibleStartPos]);
          }
          def extensibleParser = record.RuleParser;
          foreach (postfixRule in extensibleParser.PostfixRules)
            when (extensibleParser.FirstPostfixRuleId <= postfixRule.RuleId)
            {
              def sequence = postfixRule.Reflection(postfixRule.RuleId);
              AddRecord(textPos, textPos, ParseRecord.Extension(textPos, sequence, 0, record.ExtensibleStartPos, extensibleParser));
            }

        | Option                     as record =>
          AddRecord(textPos, textPos, record.NextRecord);

        | List                       as record =>
          when (CounterLessThanMax(record.Counter, record.Subrule.Max))
            AddRecord(textPos, textPos, ParseRecord.List(textPos, record.Subrule.Rule, 0, counter = record.Counter + 1, subrule = record.Subrule, nextRecord = record.NextRecord));
          when (record.Counter >= record.Subrule.Min)
            AddRecord(textPos, textPos, record.NextRecord);

        | ListWithSeparatorRule      as record =>
          AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorSeparator(textPos, record.Subrule.Rule, 0, counter = record.Counter + 1, subrule = record.Subrule, nextRecord = record.NextRecord));
          when (record.Counter >= record.Subrule.Min)
            AddRecord(textPos, textPos, record.NextRecord);

        | ListWithSeparatorSeparator as record =>
          when (CounterLessThanMax(record.Counter, record.Subrule.Max))
            AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorRule(textPos, record.Subrule.Rule, 0, counter = record.Counter, subrule = record.Subrule, nextRecord = record.NextRecord));
          when (record.Subrule.HangingSeparator && record.Counter >= record.Subrule.Min)
            AddRecord(textPos, textPos, record.NextRecord);
      }
    }

    public PredictionOrScanning(textPos : int, record : ParseRecord, recoveryStartPos : int) : void
    {
      def text = ParseResult.Text;
      match (record.CurSubrule)
      {
        | Empty                     => ()
        | Marker                    => assert3(false)
        | RegularCall       as rule =>
          def endPos = rule.Descriptor.Parse(textPos, text);
          when (endPos >= 0)
            AddRecord(textPos, endPos, record.Next());

        | TokenString       as rule =>
          def endPos = rule.Parse(textPos, text);
          when (endPos >= 0)
            AddRecord(textPos, endPos, record.Next());

        | ExtensibleCall    as rule =>
          foreach (prefixRule in rule.RuleParser.PrefixRules)
          {
            def sequence = prefixRule.Reflection(prefixRule.RuleId);
            AddRecord(textPos, textPos, ParseRecord.Extension(textPos, sequence, 0, textPos, rule.RuleParser));
          }

        | SimpleCall        as rule =>
          def endPos = rule.RuleParser.Parse(textPos, text, ParseResult);
          if (endPos < 0 || textPos == endPos && endPos == recoveryStartPos)
          {
            when (textPos == endPos && endPos == recoveryStartPos)
            {
              assert2(true);
            }
            def sequence = rule.RuleParser.Reflection(rule.RuleParser.RuleId);
            AddRecord(textPos, textPos, ParseRecord.Simple(textPos, sequence, 0));
          }
          else
            AddRecord(textPos, endPos, record.Next());

        | Option            as rule =>
          def nextRecord = record.Next();
          AddRecord(textPos, textPos, ParseRecord.Option(textPos, rule.Rule, 0, nextRecord));
          AddRecord(textPos, textPos, nextRecord);

        | List              as rule =>
          def nextRecord = record.Next();
          AddRecord(textPos, textPos, ParseRecord.List(textPos, rule.Rule, 0, counter = 0, subrule = rule, nextRecord = nextRecord));
          when (rule.Min == 0)
            AddRecord(textPos, textPos, nextRecord);

        | ListWithSeparator as rule =>
          def nextRecord = record.Next();
          AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorRule(textPos, rule.Rule, 0, counter = 0, subrule = rule, nextRecord = nextRecord));
          when (rule.Min == 0)
            AddRecord(textPos, textPos, nextRecord);
      }
    }

    public static CounterLessThanMax(counter: int, max : Nullable[int]) : bool
    {
      !max.HasValue || counter < max.GetValueOrDefault()
    }

    public ToDot(_startPos : int) : SCG.List[string] * SCG.Dictionary[string, string]
    {
      def filesToOpen = SCG.List();
      def files = SCG.Dictionary();

      //def makeShortLabel(str : string ) : string { if (str.Length > 20) str.Substring(20) + "..." else str }
      def escape(x : string) : string
      {
        x.Replace("\\", <#\\#>).Replace(<#"#>, <#\"#>)
      }
      def makeTooltip(str : string ) : string { if (str.Length > 0) escape(str) else "<EMPTY>" }
      def makeClusterName(pos : int, sequence : SequenceInfo) { $"cluster_$(pos)_$(sequence.Id)" }
      def makeExtensibleClusterName(pos : int, parserData : ExtensibleRuleParserData) { $"cluster_extensible_$(pos)_$(parserData.PrefixId)" }
      def makeExtensionClusterName(extensibleClusterName : string,  pos : int) { $"cluster_extenson_$(pos)_$(extensibleClusterName)" }
      def makeNodeName(clusterName : string, pos : int, index : int) { $"$(clusterName)_$(pos)_$(index)" }
      def makeClusterNode(clusterName : string) : string { $<# $clusterName [label="#" style="invis"]; #> }
      def makeClusterRef(target : string) : string { $<#URL="$(escape(target)).svg"#> }
      def renderCluster(parsedSequence : ParsedSequence) : string * string
      {
        def clusterName = makeClusterName(parsedSequence.Start.Pos, parsedSequence.Start.Sequence);
        def edges = SCG.List();
        def nodes = SCG.List();
        def callerNodes = SCG.List();
        def label = escape(parsedSequence.Start.ToString());
        nodes.Add(makeClusterNode(clusterName));
        foreach (parseRecordStart in parsedSequence.Records)
        {
          def nodeName = makeNodeName(clusterName, parseRecordStart.Pos, parseRecordStart.Record.Index);
          when (parseRecordStart.Record.Index > 0)
          {
            def prevNodeName = makeNodeName(clusterName, parseRecordStart.PrevPos, parseRecordStart.Record.Index - 1);
            def text = makeTooltip(ParseResult.Text.Substring(parseRecordStart.PrevPos, parseRecordStart.Pos - parseRecordStart.PrevPos));
            edges.Add($<# $prevNodeName -> $nodeName [edgetooltip="$text"]; #>);
          }
          def labelText = if (parseRecordStart.Record.IsComplete) "#COMPLETE#" else parseRecordStart.Record.CurSubrule.ToString();
          def label = escape($"$(parseRecordStart.Pos) $(labelText)");
          mutable url = "";
          unless (parseRecordStart.Record.IsComplete)
            match (parseRecordStart.Record.CurSubrule)
            {
              | SimpleCall as subrule =>
                def targetClusterKey = SequenceStart(parseRecordStart.Pos, subrule.RuleParser.Reflection(subrule.RuleParser.RuleId));
                when (Ast.ContainsKey(targetClusterKey))
                  url = makeClusterRef(makeClusterName(targetClusterKey.Pos, targetClusterKey.Sequence));

              | ExtensibleCall as subrule =>
                url = makeClusterRef(makeExtensibleClusterName(parseRecordStart.Pos, subrule.RuleParser.ParserData));

              | Option as subrule =>
                url = makeClusterRef(makeClusterName(parseRecordStart.Pos, subrule.Rule));

              | List as subrule =>
                url = makeClusterRef(makeClusterName(parseRecordStart.Pos, subrule.Rule));

              | ListWithSeparator as subrule =>
                url = makeClusterRef(makeClusterName(parseRecordStart.Pos, subrule.Rule));

              | _ => ()
            }
          def color = if (string.IsNullOrEmpty(url)) "ghostwhite" else "honeydew";
          nodes.Add($<# $nodeName [label="$label" shape=box style=filled color=black fillcolor=$color $url]; #>);

          foreach (caller in parsedSequence.Callers)
          {
            def callerClusterName = match (caller)
            {
              | ParsedSequence as caller => makeClusterName(caller.Start.Pos, caller.Start.Sequence)
              | ParsedExtensions as caller => makeExtensibleClusterName(caller.Start.Pos, caller.Start.ParserData)
              | _ => assert3(false)
            }
            def callerLabel = escape(caller.ToString());
            def clusterRef = makeClusterRef(callerClusterName);
            callerNodes.Add($<# $callerClusterName [label="$callerLabel" shape=box style=filled color=black fillcolor=moccasin $clusterRef]; #>);
            callerNodes.Add($<# $callerClusterName -> $clusterName [lhead = $clusterName]; #>);
          }
        }
        def subgraph =
        $<#
          subgraph $clusterName
          {
            bgcolor=ghostwhite;
            label="$label";
            ..$(nodes; "\n            ")
            ..$(edges; "\n            ")
          }
          ..$(callerNodes; "\n            ")
        #>;
        (clusterName, subgraph)
      }
      def renderGraph(body : string) : string
      {
        $<#
digraph RecoveryParser
{
  rankdir=LR;
  compound=true;
  $body
}
        #>
      }

      foreach (sequence in Ast.Values)
        foreach (parseRecordStart when !parseRecordStart.Record.IsComplete in sequence.Records)
        {
          match (parseRecordStart.Record.CurSubrule)
          {
            | SimpleCall as subrule =>
              sequence.AddCaller(Ast.Get(SequenceStart(parseRecordStart.Pos, subrule.RuleParser.Reflection(subrule.RuleParser.RuleId))))

            | ExtensibleCall as subrule =>
              sequence.AddCaller(ExtensionsAst.Get(ExtensibleStart(parseRecordStart.Pos, subrule.RuleParser.ParserData)))

            | Option as subrule =>
              sequence.AddCaller(Ast.Get(SequenceStart(parseRecordStart.Pos, subrule.Rule)))

            | List as subrule =>
              sequence.AddCaller(Ast.Get(SequenceStart(parseRecordStart.Pos, subrule.Rule)))

            | ListWithSeparator as subrule =>
              sequence.AddCaller(Ast.Get(SequenceStart(parseRecordStart.Pos, subrule.Rule)))

            | _ => ()
          }
        }

      foreach ((sequenceStart, subrules) when !sequenceStart.Sequence.IsExtension in Ast.KeyValuePairs)
      {
        def (name, c) = renderCluster(subrules);
        files.Add(name, renderGraph(c));
      }

      foreach ((extensibleStart, subrules) in ExtensionsAst.KeyValuePairs)
      {
        def groupBySequenceStartPos = subrules.Sequences.Grouping(s => (s.Start.Pos, s));
        def extensibleClusterName = makeExtensibleClusterName(extensibleStart.Pos, extensibleStart.ParserData);
        def label = escape($"$(extensibleStart.Pos) $(extensibleStart.ParserData.Descriptor.Name)");
        def extensibleClusterSubclusters = SCG.List();
        foreach ((pos, clusters) in groupBySequenceStartPos.KeyValuePairs)
        {
          def extensionClusterName = makeExtensionClusterName(extensibleClusterName, pos);
          def extensionClusters = SCG.List();
          foreach (subCluster in clusters)
          {
            def (_, c) = renderCluster(subCluster);
            extensionClusters.Add(c);
          }
          extensibleClusterSubclusters.Add($<#
            subgraph $extensionClusterName
            {
              bgcolor=cornsilk;
              label="";
              $(makeClusterNode(extensionClusterName))
              ..$(extensionClusters; "\n              ")
            }
          #>);
        }
        files.Add(extensibleClusterName, renderGraph($<#
          subgraph $extensibleClusterName
          {
            bgcolor=ivory;
            label="$label";
            $(makeClusterNode(extensibleClusterName))
            ..$(extensibleClusterSubclusters; "\n            ")
          }
        #>));
      }

      filesToOpen.Add(files.Keys.First());
      (filesToOpen, files)
    }
  }
}
