using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  public class EmitterEnvironment
  {
    public Manager                   : ManagerClass  { get; }
    public IsDebug                   : bool          { get; }
    public EnableOptimization        : bool          { get { !IsDebug } }
    public IsIdeMode                 : bool          { get { Manager.IsIntelliSenseMode } }
    public OptionTypeInfo            : TypeInfo      { get; }
    public ListTypeInfo              : TypeInfo      { get; }
    public AstTypeInfo               : TypeInfo      { get; }
    public AstTypeVar                : FixedType     { get; }
    public NSpanTypeInfo             : TypeInfo      { get; }
    public NSpanTypeVar              : FixedType     { get; }
    public LocationTypeInfo          : TypeInfo      { get; }
    public LocationTypeVar           : FixedType     { get; }
    public SymbolTypeInfo            : TypeInfo      { get; }
    public SymbolTypeVar             : FixedType     { get; }
    public IExportableSymbolTypeInfo : TypeInfo      { get; }
    public IExportableSymbolTypeVar  : FixedType     { get; }
    public Int32TypeInfo             : TypeInfo      { get; }
    public Int32TypeVar              : FixedType     { get; }
    public StringTypeInfo            : TypeInfo      { get; }
    public StringTypeVar             : FixedType     { get; }
    public BooleanTypeInfo           : TypeInfo      { get; }
    public BooleanTypeVar            : FixedType     { get; }
    public Root                      : HierarchyNode { get; }

    public this(manager : ManagerClass, root : HierarchyNode)
    {
      Manager                   = manager;
      IsDebug                   = manager.Options.IsConstantDefined("DEBUG") || manager.Options.IsConstantDefined("PARSER_DEBUG");
      OptionTypeInfo            = Manager.LookupTypeInfo("Nemerle.Core.option", 1);
      ListTypeInfo              = Manager.LookupTypeInfo("Nemerle.Core.list", 1);
      AstTypeInfo               = Manager.LookupTypeInfo("Nitra.Ast", 0);
      AstTypeVar                = FixedType.Class(AstTypeInfo, []);
      NSpanTypeInfo             = Manager.LookupTypeInfo("Nitra.NSpan", 0);
      NSpanTypeVar              = FixedType.Class(NSpanTypeInfo, []);
      LocationTypeInfo          = Manager.LookupTypeInfo("Nitra.Location", 0);
      LocationTypeVar           = FixedType.Class(LocationTypeInfo, []);
      SymbolTypeInfo            = Manager.LookupTypeInfo("Nitra.Typing.Symbol", 0);
      SymbolTypeVar             = FixedType.Class(SymbolTypeInfo, []);
      IExportableSymbolTypeInfo = Manager.LookupTypeInfo("Nitra.Serialization.IExportableSymbol", 0);
      IExportableSymbolTypeVar  = FixedType.Class(IExportableSymbolTypeInfo, []);
      Int32TypeInfo             = Manager.LookupTypeInfo("System.Int32", 0);
      Int32TypeVar              = FixedType.Class(Int32TypeInfo, []);
      StringTypeInfo            = Manager.LookupTypeInfo("System.String", 0);
      StringTypeVar             = FixedType.Class(StringTypeInfo, []);
      BooleanTypeInfo           = Manager.LookupTypeInfo("System.Boolean", 0);
      BooleanTypeVar            = FixedType.Class(BooleanTypeInfo, []);
      Root                      = root;
    }

    public NamespaceOfSymbol(symbol : Symbol) : GlobalEnv
    {
      Manager.CoreEnv.EnterIntoNamespace(symbol.Node.Parent.FullNameParts);
    }

    [Memoize]
    public GetAstType(symbol : RuleSymbol) : FixedType
    {
      def nsParts    = symbol.DeclaringModule.Node.Parent.FullNameParts;
      def moduleName = symbol.DeclaringModule.Name + "Ast";
      def astName    = moduleName :: symbol.ModuleRelativeName;
      BindFixedType(nsParts + astName)
    }

    public GetAstType(ruleType : RuleType) : FixedType
    {
      | Chars        => NSpanTypeVar
      | Ref(symbol)  => GetAstType(symbol)
      | List(ty)     => FixedType.Class(ListTypeInfo, [GetAstType(ty)])
      | Option(ty)   => FixedType.Class(OptionTypeInfo, [GetAstType(ty)])
      | Tuple(types) => FixedType.Tuple(types.Map(GetAstType(_)))
      | Void         => FixedType.Void()
    }

    [Memoize]
    public MakeSubruleOffsetName(subrule : SubruleCompileInfo) : string
    {
      $"<# $(subrule)  offset $(subrule.Offset) #>"
    }

    [Memoize]
    public MakeSequenceHeaderOffsetName(sequenceHeader : SequenceHeaderCompileInfo) : string
    {
      def title = match (sequenceHeader)
      {
        | Id    => "Id"
        | Next  => "Next"
        | State => "State"
      };
      $"<# $(title)  offset $(sequenceHeader.Offset) #>"
    }

    private BindFixedType(typeName : list[string]) : FixedType
    {
      match (Manager.CoreEnv.LookupType(typeName))
      {
        | Some(ty) => FixedType.Class(ty, [])
        | None     => assert3(false)
      }
    }
  }
}
