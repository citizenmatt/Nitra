using Nitra.Model;
using Nitra.Typing.RuleMethod;
using Nitra.Utils;

using Nemerle;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  [Record, ExportableSymbol]
  public abstract class ExtensionRuleSymbol     : SyntaxRuleSymbol, IRuleDeclarationSite
  {
    public        abstract BaseRule             : SymbolRef[ExtensibleRuleSymbol] { get; }
    public        override Description          : string                          { get { "extension rule" } }
    public        override CanParseEmptyString  : bool                            { get { assert(false); } }

    public variant ExtensionRuleType
    {
      | Prefix
      | Postfix { prefix : Rule.Call; rule : Rule.Sequence; public BindingPower : int { get prefix.BindingPower } }
    }

    public ExtensionType : ExtensionRuleType
    {
      [Memoize] get { DetectExtensionType(BaseRule, Rule) }
    }

    private static DetectExtensionType(baseRule : SymbolRef[ExtensibleRuleSymbol], seq : Rule.Sequence) : ExtensionRuleType
    {
      def isMarker(r : SymbolRef[_]) : bool
      {
        | SymbolRef.Some(s) => s is MarkerSymbol
        | SymbolRef.None    => false
      }

      def lookupPrefixCall(rules : list[Rule]) : option[Rule.Call] * list[Rule]
      {
        | Call(callee, _)           :: tail when isMarker(callee)   => lookupPrefixCall(tail)
        | Call(callee, _) as prefix :: tail when callee == baseRule => (Some(prefix), tail)
        | Sequence(seqRules)        :: tail =>
          match (lookupPrefixCall(seqRules))
          {
            | (None, []) => lookupPrefixCall(tail)
            | (None, _)  => (None(), rules)
            | (Some as prefix, seqTail) => (prefix, seqTail + tail)
          }

        | rules => (None(), rules)
      }

      match (lookupPrefixCall(seq.Rules))
      {
        | (None(), _)                => ExtensionRuleType.Prefix()
        | (Some(prefix), otherRules) => ExtensionRuleType.Postfix(prefix, Rule.Sequence(seq, otherRules))
      }
    }
  }

  public sealed class ParsedExtensionRule : ExtensionRuleSymbol
  {
    public this(ast : G.ExtensionRule.Ast, declarationSite : IRuleDeclarationSite)
    {
      def (loc, name) =
        match (ast.NameOpt)
        {
          | Some((name, _)) => (name.Location, name.GetText())
          | _ =>
            def name1 = ast.RuleExpression.InferName();
            def name2 = if (IsIdentifier(name1)) ToPascalCase(name1) else "";

            when (name2 == "")
              ProjectSystem.NitraProject.CurrentProject.Error(ast.Location, "Can't infer name for this rule.", -1);
            (Location(ast.Location.Source, ast.Pipe.EndPos, ast.Pipe.EndPos), name2);
        };

      base(loc, name);
      _ast = ast;
      DeclarationSite = declarationSite;
    }

    public _ast                      : G.ExtensionRule.Ast;

    public override DeclarationSite  : IRuleDeclarationSite  { get; }
    public override BaseRule         : ExtensibleRuleRef     { get { _ast.BaseRuleRef } }
    public override Type             : RuleType              { get { _ast.Type } }
    public override Options          : RuleDefinitionOptions { get { _ast.Options } }
    public override Rule             : Rule.Sequence         { get { _ast.TypedRule } }
    public override LastLocation     : option[Location]
    {
      [Memoize]  get
      {
        match (_ast.ExtensionRuleBodyOpt)
        {
          | Some(body) => Some(body.GetLastLocation())
          | _          => Some(Utils.MakeLastLocation(_ast))
        }
      }
    }
    public override IdInGrammar         : int        { [Memoize] get { DeclaringModule.GetNewRuleId() } }
    public override FirstCharLowerBound : char       {           get { FirstCharBounds[0] } }
    public override FirstCharUpperBound : char       {           get { FirstCharBounds[1] } }
    private         FirstCharBounds     : CharBounds
    {
      [Memoize] get
      {
        match (ExtensionType)
        {
          | Prefix              => EvalFirstCharBounds(Rule)
          | Postfix(_, rule) => EvalFirstCharBounds(rule)
        }
      }
    }
  }
}
