using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Nitra.Internal;

namespace Nitra
{
  public abstract class Ast : Located
  {
    public override ToString() : string
    {
      ToString(PrettyPrintOptions.DebugIndent)
    }

    public ToString(options : PrettyPrintOptions) : string
    {
      def writer = StringPrettyPrintWriter(options);
      PrettyPrint(writer, 0);
      writer.ToString()
    }

    public virtual PrettyPrint(writer : PrettyPrintWriter, callerBindingPower : int) : void
    {
      _ = writer;
      _ = callerBindingPower;
    }

    protected virtual PrettyPrintSource : IPrettyPrintSource
    {
      get { this.Location.Source }
    }
  }

  public interface IAmbiguousAst
  {
    Location       : Location       { get; }
    Ambiguities    : IList[Ast]     { get; }
    RuleDescriptor : RuleDescriptor { get; }
  }
}
